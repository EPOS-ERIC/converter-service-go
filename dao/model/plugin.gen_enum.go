// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// SupportedRuntimesBinary is a SupportedRuntimes of type binary.
	SupportedRuntimesBinary SupportedRuntimes = "binary"
	// SupportedRuntimesJava is a SupportedRuntimes of type java.
	SupportedRuntimesJava SupportedRuntimes = "java"
	// SupportedRuntimesPython is a SupportedRuntimes of type python.
	SupportedRuntimesPython SupportedRuntimes = "python"
)

var ErrInvalidSupportedRuntimes = errors.New("not a valid SupportedRuntimes")

// SupportedRuntimesValues returns a list of the values for SupportedRuntimes
func SupportedRuntimesValues() []SupportedRuntimes {
	return []SupportedRuntimes{
		SupportedRuntimesBinary,
		SupportedRuntimesJava,
		SupportedRuntimesPython,
	}
}

// String implements the Stringer interface.
func (x SupportedRuntimes) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SupportedRuntimes) IsValid() bool {
	_, err := ParseSupportedRuntimes(string(x))
	return err == nil
}

var _SupportedRuntimesValue = map[string]SupportedRuntimes{
	"binary": SupportedRuntimesBinary,
	"java":   SupportedRuntimesJava,
	"python": SupportedRuntimesPython,
}

// ParseSupportedRuntimes attempts to convert a string to a SupportedRuntimes.
func ParseSupportedRuntimes(name string) (SupportedRuntimes, error) {
	if x, ok := _SupportedRuntimesValue[name]; ok {
		return x, nil
	}
	return SupportedRuntimes(""), fmt.Errorf("%s is %w", name, ErrInvalidSupportedRuntimes)
}

const (
	// VersionTypeBranch is a VersionType of type branch.
	VersionTypeBranch VersionType = "branch"
	// VersionTypeTag is a VersionType of type tag.
	VersionTypeTag VersionType = "tag"
)

var ErrInvalidVersionType = errors.New("not a valid VersionType")

// VersionTypeValues returns a list of the values for VersionType
func VersionTypeValues() []VersionType {
	return []VersionType{
		VersionTypeBranch,
		VersionTypeTag,
	}
}

// String implements the Stringer interface.
func (x VersionType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VersionType) IsValid() bool {
	_, err := ParseVersionType(string(x))
	return err == nil
}

var _VersionTypeValue = map[string]VersionType{
	"branch": VersionTypeBranch,
	"tag":    VersionTypeTag,
}

// ParseVersionType attempts to convert a string to a VersionType.
func ParseVersionType(name string) (VersionType, error) {
	if x, ok := _VersionTypeValue[name]; ok {
		return x, nil
	}
	return VersionType(""), fmt.Errorf("%s is %w", name, ErrInvalidVersionType)
}
